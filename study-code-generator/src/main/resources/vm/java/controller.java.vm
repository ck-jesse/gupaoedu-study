package ${packageName}.controller;

import ${packageName}.service.${ClassName}Service;

import com.hs.doc.gen.annotation.DocMethod;
import com.hs.doc.gen.annotation.DocService;
import com.hs.doc.gen.consts.DocRequestMethod;
import com.hs.platform.log.access.annotation.LogAccess;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @gen ${datetime}
 */
@Slf4j
@LogAccess
@RestController
@RequestMapping("/${moduleName}/${businessName}")
@DocService(service = "${serviceName}", module = "${functionName}相关", version = "1.0", value = "/${moduleName}/${businessName}")
public class ${ClassName}Controller {

    @Autowired
    ${ClassName}Service ${className}Service;

    @PostMapping(value = "/query${ClassName}ById", produces = MediaTypeConsts.X_PROTOBUF)
    @DocMethod(name = "/query${ClassName}ById", version = "1.0", produces = MediaTypeConsts.X_PROTOBUF,
            method = DocRequestMethod.POST, desc = "查询${functionName}",
            parameterTypeIdl = "${ClassName}Proto.proto", parameterType = ${ClassName}Proto.${ClassName}QueryByIdRequest.class,
            returnTypeIdl = "${ClassName}Proto.proto", returnType = ${ClassName}Proto.${ClassName}QueryByIdResponse.class)
    public ${ClassName}Proto.${ClassName}QueryByIdResponse query${ClassName}ById(${ClassName}Proto.${ClassName}QueryByIdRequest request) {
        return ${className}Service.query${ClassName}ById(request);
    }

    @PostMapping(value = "/query${ClassName}List", produces = MediaTypeConsts.X_PROTOBUF)
    @DocMethod(name = "/query${ClassName}List", version = "1.0", produces = MediaTypeConsts.X_PROTOBUF,
            method = DocRequestMethod.POST, desc = "查询${functionName}列表",
            parameterTypeIdl = "${ClassName}Proto.proto", parameterType = ${ClassName}Proto.${ClassName}QueryListRequest.class,
            returnTypeIdl = "${ClassName}Proto.proto", returnType = ${ClassName}Proto.${ClassName}QueryListResponse.class)
    public ${ClassName}Proto.${ClassName}QueryListResponse query${ClassName}List(${ClassName}Proto.${ClassName}QueryListRequest request) {
        return ${className}Service.query${ClassName}List(request);
    }

    @PostMapping(value = "/add${ClassName}", produces = MediaTypeConsts.X_PROTOBUF)
    @DocMethod(name = "/add${ClassName}", version = "1.0", produces = MediaTypeConsts.X_PROTOBUF,
            method = DocRequestMethod.POST, desc = "新增${functionName}",
            parameterTypeIdl = "${ClassName}Proto.proto", parameterType = ${ClassName}Proto.${ClassName}AddRequest.class,
            returnTypeIdl = "${ClassName}Proto.proto", returnType = ${ClassName}Proto.${ClassName}AddResponse.class)
    public ${ClassName}Proto.${ClassName}AddResponse add${ClassName}(${ClassName}Proto.${ClassName}AddRequest request) {
        return ${className}Service.add${ClassName}(request);
    }

    @PostMapping(value = "/update${ClassName}", produces = MediaTypeConsts.X_PROTOBUF)
    @DocMethod(name = "/update${ClassName}", version = "1.0", produces = MediaTypeConsts.X_PROTOBUF,
            method = DocRequestMethod.POST, desc = "修改${functionName}",
            parameterTypeIdl = "${ClassName}Proto.proto", parameterType = ${ClassName}Proto.${ClassName}UpdateRequest.class,
            returnTypeIdl = "${ClassName}Proto.proto", returnType = ${ClassName}Proto.BaseResponse.class)
    public ${ClassName}Proto.BaseResponse update${ClassName}(${ClassName}Proto.${ClassName}UpdateRequest request) {
        return ${className}Service.update${ClassName}(request);
    }

    @PostMapping(value = "/delete${ClassName}ById", produces = MediaTypeConsts.X_PROTOBUF)
    @DocMethod(name = "/delete${ClassName}ById", version = "1.0", produces = MediaTypeConsts.X_PROTOBUF,
            method = DocRequestMethod.POST, desc = "删除${functionName}",
            parameterTypeIdl = "${ClassName}Proto.proto", parameterType = ${ClassName}Proto.${ClassName}DelRequest.class,
            returnTypeIdl = "${ClassName}Proto.proto", returnType = ${ClassName}Proto.BaseResponse.class)
    public ${ClassName}Proto.BaseResponse delete${ClassName}ById(${ClassName}Proto.${ClassName}DelRequest request) {
        return ${className}Service.delete${ClassName}ById(request);
    }

    @PostMapping(value = "/delete${ClassName}ByIdList", produces = MediaTypeConsts.X_PROTOBUF)
    @DocMethod(name = "/delete${ClassName}ByIdList", version = "1.0", produces = MediaTypeConsts.X_PROTOBUF,
            method = DocRequestMethod.POST, desc = "批量删除${functionName}",
            parameterTypeIdl = "${ClassName}Proto.proto", parameterType = ${ClassName}Proto.${ClassName}DelRequest.class,
            returnTypeIdl = "${ClassName}Proto.proto", returnType = ${ClassName}Proto.BaseResponse.class)
    public ${ClassName}Proto.BaseResponse delete${ClassName}ByIdList(${ClassName}Proto.${ClassName}DelRequest request) {
        return ${className}Service.delete${ClassName}ByIdList(request);
    }

}
